{"version":3,"sources":["components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","todo","index","markTodo","removeTodo","Form","className","Group","controlId","Control","plaintext","readOnly","type","style","textDecoration","isDone","placeholder","title","description","date","size","Button","onClick","FormTodo","addTodo","useState","setTitle","setDescription","setDate","onSubmit","e","preventDefault","console","log","Label","value","onChange","target","TodoList","todos","setTodos","newTodos","splice","map","Card","Body","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec3d11b3.chunk.js","sourcesContent":["import {useState} from \"react\";\r\nimport {Button, Card, Form,} from 'react-bootstrap';\r\n\r\n\r\nfunction Todo({todo, index, markTodo, removeTodo}) {\r\n    return (\r\n        <Form className=\"todo\">\r\n            <Form.Group className=\"mb-1\"\r\n                        controlId=\"exampleForm.ControlInput1\">\r\n                <Form.Control plaintext\r\n                              readOnly\r\n                              className=\"input-card\"\r\n                              type=\"textarea\"\r\n                              style={{textDecoration: todo.isDone ? \"line-through\" : \"\"}}\r\n                              placeholder={todo.title}/>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-1\"\r\n                        controlId=\"exampleForm.ControlInput1\">\r\n                <Form.Control plaintext\r\n                              readOnly\r\n                              className=\"input-card\"\r\n                              type=\"textarea\"\r\n                              style={{textDecoration: todo.isDone ? \"line-through\" : \"\"}}\r\n                              placeholder={todo.description}/>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-1\"\r\n                        controlId=\"exampleForm.ControlInput1\">\r\n                <Form.Control plaintext\r\n                              readOnly\r\n                              className=\"input-card\"\r\n                              type=\"textarea\"\r\n                              style={{textDecoration: todo.isDone ? \"line-through\" : \"\"}}\r\n                              placeholder={todo.date}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formFileSm\"\r\n                        className=\"file-input\">\r\n                <Form.Control type=\"file\"\r\n                              size=\"sm\"/>\r\n            </Form.Group>\r\n            <Button className=\"success-button\"\r\n                    onClick={() => markTodo(index)}>✓</Button>{' '}\r\n            <Button className=\"cancel-button\"\r\n                    onClick={() => removeTodo(index)}>✕</Button>\r\n        </Form>\r\n    );\r\n}\r\n\r\n\r\nfunction FormTodo({addTodo}) {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (!title || !description || !date) return;\r\n        console.log(title, description, date);\r\n        addTodo({title, description, date});\r\n        // setTitle(\"\");\r\n        // setDescription(\"\");\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}\r\n              className=\"pb-2\">\r\n            <Form.Group>\r\n                <Form.Label><b>Add Todo</b></Form.Label>\r\n                <Form.Control type=\"text\"\r\n                              className=\"input\"\r\n                              value={title}\r\n                              onChange={e => setTitle(e.target.value)}\r\n                              placeholder=\"Title\"/>\r\n                <br/>\r\n                <Form.Control type=\"text\"\r\n                              className=\"input\"\r\n                              value={description}\r\n                              onChange={e => setDescription(e.target.value)}\r\n                              placeholder=\"Description\"/>\r\n                <br/>\r\n                <Form.Control type=\"date\"\r\n                              className=\"input\"\r\n                              value={date}\r\n                              onChange={e => setDate(e.target.value)}\r\n                              placeholder=\"Date\"/>\r\n            </Form.Group>\r\n            <Button className=\"submit-button\" type=\"submit\">\r\n                Submit\r\n            </Button>\r\n        </Form>\r\n    );\r\n}\r\n\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([\r\n        {\r\n            title: \"This is a sample todo\",\r\n            description: \"Description\",\r\n            date: \"Deadline date\",\r\n            isDone: false\r\n        }\r\n    ]);\r\n\r\n    const addTodo = (todo) => {\r\n        setTodos([...todos, todo]);\r\n    };\r\n\r\n    const markTodo = index => {\r\n        const newTodos = [...todos];\r\n        newTodos[index].isDone = true;\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const removeTodo = index => {\r\n        const newTodos = [...todos];\r\n        newTodos.splice(index, 1);\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n                <h1>TodoList React App</h1>\r\n                <FormTodo addTodo={addTodo}/>\r\n                <div>\r\n                    {todos.map((todo, index) => (\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Todo\r\n                                    key={index}\r\n                                    index={index}\r\n                                    todo={todo}\r\n                                    markTodo={markTodo}\r\n                                    removeTodo={removeTodo}\r\n                                />\r\n                            </Card.Body>\r\n                        </Card>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import './App.css';\r\nimport TodoList from './components/TodoList';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Container} from \"react-bootstrap\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n        <TodoList/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\r\n    <App />\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}